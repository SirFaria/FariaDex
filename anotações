// Home ({pokemonApiResponse}: HomeProps) {
// const { setPokemonList } = usePoke();
// useEffect(() => {
//   setPokemonList(pokemonApiResponse.results);
// },[])



// export const getStaticProps: GetStaticProps = async () => {
//   const { data: pokemonApiResponse } = await api.get('pokemon?offset=0&limit=151');
//   return {
//     props: {
//       pokemonApiResponse,
//     }
//   }
// }



// const [pokemonInfo, setPokemonInfo] = useState<TPokemonInfo>();
// const [isLoading, setIsLoading] = useState(true);
// useEffect(() => {
//   const fetchPkmData = async() =>{
//     const {data: pokeInfo } = await api.get(`https://pokeapi.co/api/v2/pokemon/${pkmName}/`);
//     setPokemonInfo(pokeInfo);
//     setIsLoading(false);
//     console.log('fez fetch')
//   }
//   fetchPkmData();
// }, [pkmName]);


// POKECONTEXT

// import { createContext, useContext, useEffect, useState } from "react";
// import { api } from "../services/api";

// import { TPokemon, PokeContextProviderProps, TPokeContext, TPokemonData } from "./types";

// export const PokeContext = createContext({} as TPokeContext);


// export function PokeContextProvider({ children }: PokeContextProviderProps) {
//   const [pokemonList, setPokemonList] = useState<TPokemon[]>([]);
//   const [searchValue, setSearchValue] = useState<string>('');

//   useEffect(() => {
//     const fetchPkmList = async() => {
//       const { data: pokemonApiResponse}: TPokemonData = await api.get('pokemon?offset=0&limit=151');
//         setPokemonList(pokemonApiResponse.results);
//       }
//     fetchPkmList();
//   }, [])

//   return (
//     <PokeContext.Provider value={{pokemonList, setPokemonList, searchValue, setSearchValue}}> {children}</PokeContext.Provider>
//   )
// }

// export const usePoke = () => {
//   return useContext(PokeContext)
// }

// ---------------------------------------------------------------------------------------------------------

// import axios from "axios";
// import useSWR from "swr";
// import { IApiResponse, TPokemonEvolutions } from "../../Types/TPokemonEvolution";



// const fetcher = (url: string) => axios.get(url).then(res => res.data)

// function getEvolutions(evolutionChain: IApiResponse):TPokemonEvolutions {
//   const unevolved = evolutionChain.chain
//   const hasEvo =  evolutionChain.chain.evolves_to.length > 0;

//   const firstEvos = unevolved.evolves_to.map(firstEvo => {
//     return {
//       ...firstEvo,
//       evolution_order: 'first',
//       evolved_from: unevolved.species.name,
//     }
//   });

//   const secondEvos = firstEvos.map(firstEvo => {
//     const secondEvoWithEvolvedFrom = firstEvo.evolves_to.map(evo => {
//       return {
//         ...evo,
//         evolved_from: firstEvo.species.name,
//         evolution_order: 'second',
//       }
//     });

//     return secondEvoWithEvolvedFrom;
//   }).flat();
  
//   return {
//     hasEvo,
//     unevolved,
//     firstEvos,
//     secondEvos,
//   }
// }

// export default function usePokemonEvolution (url: string) {
  
//   const { data, error } = useSWR<IApiResponse>(url, fetcher);

//   const pokemonEvolutions: TPokemonEvolutions | {} = data ? getEvolutions(data) : {};

//   return {
//     pokemonEvolutions,
//     error,
//   }
// }

// -------------------------------------------------------------------------------------------------------------------

// <S.ArrowColumn className='arrow'>
// {(pkmEvos.secondEvos.length > 0 ) ? 
//       (pkmEvos.secondEvos.map(evolucao => { // Segunda evolução
//         return <div key={evolucao.evo_name}>→</div>
//       }))
//     : null
//   }
// </S.ArrowColumn>


// <S.EvoColumn className='secondE'>
// {(pkmEvos.secondEvos.length > 0 ) ? 
//     (pkmEvos.secondEvos.map(evolucao => { // Segunda evolução
//       return (<EvolutionCard 
//         type={type} 
//         key={evolucao.evo_name} 
//         pkmName={evolucao.evo_name} 
//       />)
//     }))
//   : null
// }
// </S.EvoColumn>
